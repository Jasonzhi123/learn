/**
 * js将时间戳转换成日期格式
 *timestamp【时间戳】
 */
 
 
 
 

 
function timestampToTime(timestamp) {
  var date = new Date(timestamp * 1000); //时间戳为10位需*1000，时间戳为13位的话不需乘1000
  var Y, M, D, h, m, s;
  Y = date.getFullYear() + '-';
  M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
  D = date.getDate() + ' ';
  h = date.getHours() + ':';
  m = date.getMinutes() + ':';
  s = date.getSeconds();
  return Y + M + D + h + m + s;
}

/**
 * 生成区间随机数
 */
function rand(lowValue, highValue) {
  highValue = highValue - 1;
  var choice = highValue - lowValue + 1;
  return Math.floor(Math.random() * choice + lowValue);
}

/**
 * 转换时间格式，分秒
  *time【时间戳】
 */
function secondsToTime(time) {
  if (typeof time !== 'number' || time < 0) {
    return time
  }
  if (time <= 60) {
    time = parseInt(time)
    return '00:' + time
  }
  var hour = parseInt(time / 3600)
  time = time % 3600
  var minute = parseInt(time / 60)
  time = parseInt(time / 60)
  var second = time
  return ([minute, second]).map(function(n) {
    n = n.toString()
    return n[1] ? n : '0' + n
  }).join(':')
}

/**
 * 转换星期
 * */
function getWeek(dateString) {
  var date;
  if (isNull(dateString)) {
    date = new Date();
  } else {
    var dateArray = dateString.split("-");
    date = new Date(dateArray[0], parseInt(dateArray[1] - 1), dateArray[2]);
  }
  return "星期" + "日一二三四五六".charAt(date.getDay());
};

/**
 * 将时间戳转为日期格式,精确到分
 */
function formatTimes(date) {
  var year = date.getFullYear()
  var month = date.getMonth() + 1
  var day = date.getDate()
  var hour = date.getHours()
  var minute = date.getMinutes()
  return [year, month, day].map(formatNumber).join('-') + ' ' + [hour, minute].map(formatNumber).join(':')
}

/**
 * 将时间戳转为日期格式,保留年月日
 */
function formatOnlyDates(date) {
  var year = date.getFullYear()
  var month = date.getMonth() + 1
  var day = date.getDate()
  // return [year, month, day].map(formatNumber).join('-')
  return year + '年' + month + '月' + day + '日'
}

/**
 * 将时间戳转为日期格式,保留年月日
 */
function formatOnlyDatesLine(date) {
  var year = date.getFullYear()
  var month = date.getMonth() + 1
  var day = date.getDate()
  return [year, month, day].map(formatNumber).join('-')
  // return year + '年' + month + '月' + day + '日'
}
/**
 * 将时间戳转为日期格式,保留月日
 */
function formatOnlyMD(date) {
  var month = date.getMonth() + 1
  var day = date.getDate()
  return [month, day].map(formatNumber).join('-')
}

/**
 * 将时间戳转为日期格式,保留时分
 */
function formatOnlyTimes(date) {
  var hour = date.getHours()
  var minute = date.getMinutes()
  return [hour, minute].map(formatNumber).join(':')
}

function config(name) {
  var obj = require('../config/config')
  if (name) {
    return obj.config()[name];
  } else {
    return obj.config();
  }
}

/**
 * 将日期格式转为时间戳
 * 三种方式获取：
  time1 = date.getTime();
  time2 = date.valueOf();
  time3 = Date.parse(date);
  三种获取的区别：
  第一、第二种：会精确到毫秒
  第三种：只能精确到秒，毫秒将用0来代替
 */
function dateToTime(strtime) {
  var date = new Date(strtime); //传入一个时间格式，如果不传入就是获取现在的时间了，
  // var arr = strtime.replace(/ |:/g, '-').split('-');
  // date = new Date(Date.UTC(arr[1], arr[2], arr[3], arr[4], arr[5]));
  return date.getTime() / 1000;
}

/**
 * 时间转换时间戳
 */
function transdate(strtime) {
  var date = new Date();
  date.setFullYear(strtime.substring(0, 4));
  date.setMonth(strtime.substring(5, 7) - 1);
  date.setDate(strtime.substring(8, 10));
  date.setHours(strtime.substring(11, 13));
  date.setMinutes(strtime.substring(14, 16));
  date.setSeconds(strtime.substring(17, 19));
  return Date.parse(date) / 1000;
}

/* 毫秒级倒计时 */
function countdown(that, total_micro_second) {
  // 渲染倒计时时钟
  that.setData({
    clock: dateformat(total_micro_second)
  });

  if (total_micro_second <= 0 || isNaN(total_micro_second)) {
    that.setData({
      clock: [0, 0, 0].map(formatNumber)
    });
    // timeout则跳出递归
    return;
  }
  setTimeout(function() {
    // 放在最后
    total_micro_second -= 60;
    countdown(that, total_micro_second);
  }, 60)
}

// 时间格式化输出，如3:25:19 86。每10ms都会调用一次
function dateformat(micro_second) {
  var second = Math.floor(micro_second / 1000); // 秒数
  var hr = Math.floor(second / 3600); // 小时位
  var min = Math.floor((second - hr * 3600) / 60); // 分钟位
  var sec = (second - hr * 3600 - min * 60); // equal to => var sec = second % 60;  // 秒位
  var micro_sec = Math.floor((micro_second % 1000) / 10); // 毫秒位，保留2位
  return [hr, min, sec].map(formatNumber);
}

function formatNumber(n) {
  n = n.toString()
  return n[1] ? n : '0' + n
}

function ajax(obj, call_num) {
  console.log(obj);
  var endtime = undefined;
  var retrunType = {
    'json': "Content-Type': 'application/json",
  };
  if (undefined == obj.retrunType) {
    obj.retrunType = 'json';
  }
  var returnType = obj.retrunType;
  var starttime = new Date().getTime();
  wx.request({
    url: obj.url,
    data: obj.data || [],
    method: obj.method || "GET",
    header: {
      'content-type': 'application/x-www-form-urlencoded'
    },
    success: function(data) {
      endtime = new Date().getTime();
      console.warn('Info : ' + " Url : " + obj.url + " Time : " + (endtime - starttime) / 1000 + "s");
      console.log(data)
      if (data.statusCode == 200) {
        var data_core = data.data;
        if (config('appDebug')) {
          console.log(data_core);
        }
        // request_token过期
        if (data_core.error == -1) {
          //用户授权信息
          wx.removeStorageSync('tokenInfo');
          console.log('清除了tokeninfo值')
          wx.showToast({
            title: '登录超时',
            icon: 'loading',
            duration: 5000,
            success: function(res) {
              wx.reLaunch({
                url: '../index/index'
              })
            }
          })
        }
        obj.success(data_core);
      } else {
        console.error("Mes : " + "_状态码: " + data.statusCode + ' ERR: Args : ' + JSON.stringify(obj.data) + " Url : " + obj.url + " Time : " + (endtime - starttime) / 1000 + "s");
      }
    },
    error: function($data) {
      endtime = new Date().getTime();
      console.error('ERR: Args : ' + JSON.stringify(obj.data) + " Url : " + obj.url + " Time : " + (endtime - starttime) / 1000 + "s");
      obj.error($data);
      wx.redirectTo({
        url: '../linkErr/linkErr?text=服务器开了个小差'
      })
    },
    complete: function($data) {
      if ($data.errMsg == "request:fail") {
        var info = {
          'result': 'fail',
          'error_info': config('error_text')[0]
        };
        if (typeof obj.error == "function") {
          obj.error(info);
        } else {}
      }
    }
  })
}

/*
*图片宽高比例
*/
function imageUtil(e) {
  var imageSize = {};
  var originalWidth = e.detail.width; //图片原始宽 
  var originalHeight = e.detail.height; //图片原始高 
  var originalScale = originalHeight / originalWidth; //图片高宽比 
  console.log('originalWidth: ' + originalWidth)
  console.log('originalHeight: ' + originalHeight)
  //获取屏幕宽高 
  wx.getSystemInfo({
    success: function(res) {
      var windowWidth = res.windowWidth;
      var windowHeight = res.windowHeight;
      var windowscale = windowHeight / windowWidth; //屏幕高宽比 
      console.log('windowWidth: ' + windowWidth)
      console.log('windowHeight: ' + windowHeight)
      if (originalScale < windowscale) { //图片高宽比小于屏幕高宽比 
        //图片缩放后的宽为屏幕宽 
        imageSize.imageWidth = windowWidth;
        imageSize.imageHeight = (windowWidth * originalHeight) / originalWidth;
      } else { //图片高宽比大于屏幕高宽比 
        //图片缩放后的高为屏幕高 
        imageSize.imageHeight = windowHeight;
        imageSize.imageWidth = (windowHeight * originalWidth) / originalHeight;
      }
    }
  })
  console.log('缩放后的宽: ' + imageSize.imageWidth)
  console.log('缩放后的高: ' + imageSize.imageHeight)
  return imageSize;
}

/* 精确加法
 * @param {String | Number} arg1
 * @param {String | Number} arg2
 * @returns {number} arg1 + arg2
 */
function numAdd(arg1, arg2) {
  // 数字化
  var num1 = parseFloat(arg1);
  var num2 = parseFloat(arg2);
  var r1, r2, m;
  try {
    r1 = num1.toString().split('.')[1].length;
  } catch (e) {
    r1 = 0;
  }
  try {
    r2 = num2.toString().split('.')[1].length;
  } catch (e) {
    r2 = 0;
  }
  m = Math.pow(10, Math.max(r1, r2));
  return (num1 * m + num2 * m) / m;
}

/**
 * 精确减法
 * @param {Number | String} arg1
 * @param {Number | String} arg2
 * @returns {number} arg1 - arg2
 */
function numsub(arg1, arg2) {
  // 数字化
  var num1 = parseFloat(arg1);
  var num2 = parseFloat(arg2);
  var r1, r2, m, n;
  try {
    r1 = num1.toString().split('.')[1].length;
  } catch (e) {
    r1 = 0;
  }
  try {
    r2 = num2.toString().split('.')[1].length;
  } catch (e) {
    r2 = 0;
  }
  m = Math.pow(10, Math.max(r1, r2));
  return ((num1 * m - num2 * m) / m);
}

/**
 * 精确乘法
 * @param {Number | String} arg1
 * @param {Number | String} arg2
 * @returns {number} arg1 * arg2
 */
function numsmul(arg1, arg2) {
  var num1 = parseFloat(arg1);
  var num2 = parseFloat(arg2);
  var m = 0,
    s1 = num1.toString(),
    s2 = num2.toString();

  try {
    m += s1.split('.')[1].length;
  } catch (e) {}
  try {
    m += s2.split('.')[1].length;
  } catch (e) {}
  return Number(s1.replace('.', '')) * Number(s2.replace('.', '')) / Math.pow(10, m);
}

/**
 * 精确除法
 * @param {Number | String} arg1
 * @param {Number | String} arg2
 * @returns {number}
 */
function numdiv(arg1, arg2) {
  // 数字化
  var num1 = parseFloat(arg1);
  var num2 = parseFloat(arg2);
  var t1 = 0,
    t2 = 0,
    r1, r2;

  try {
    t1 = num1.toString().split('.')[1].length;
  } catch (e) {}

  try {
    t2 = num2.toString().split('.')[1].length;
  } catch (e) {}

  r1 = Number(num1.toString().replace('.', ''));
  r2 = Number(num2.toString().replace('.', ''));
  return (r1 / r2) * Math.pow(10, t2 - t1);
}

/**
 * 函数节流
 * */
function throttle(fn, gapTime) {
  if (gapTime == null || gapTime == undefined) {
    gapTime = 1500
  }

  let _lastTime = null;
  // 返回新的函数
  return function() {
    let _nowTime = +new Date()
    if (_nowTime - _lastTime > gapTime || !_lastTime) {
      fn.apply(this, arguments) //将this和参数传给原函数
      _lastTime = _nowTime
    }
  }
}

/**
 * 强制转为数字型
 */
function stringToInt(str) {
  return parseInt(str.toString());
}

/**
 * 数字数
 *str[字符串]
 * */
function chkstrlen(str) {
  let strlen = 0;
  for (let i = 0; i < str.length; i++) {
    if (str.charCodeAt(i) > 255) //如果是汉字，则字符串长度加2
      strlen += 2;
    else strlen++;
  }
  return strlen;
}

/**
 * 通过url字符串获取里面的参数值
 * */
function getQueryString(url, name) {
  return decodeURIComponent((new RegExp('[?|&]' + name + '=' + '([^&;]+?)(&|#|;|$)').exec(url) || [, ''])[1].replace(/\+/g, '%20')) || null
}

/**
 * 将一个数组分成几个同等长度的数组
 * array[分割的原数组]
 * size[每个子数组的长度]
 * */
function sliceArray(array, size) {
  var result = [];
  for (var x = 0; x < Math.ceil(array.length / size); x++) {
    var start = x * size;
    var end = start + size;
    result.push(array.slice(start, end));
  }
  return result;
}

module.exports = {
  ajax: ajax,
  config: config,

  numAdd: numAdd, // 精确加法
  numsub: numsub, // 精确减法
  numsmul: numsmul, //精确乘法
  numdiv: numdiv, //精确除法

  formatTimes: formatTimes, //将时间戳转为日期格式,精确到分
  formatOnlyDates: formatOnlyDates, //将时间戳转为日期格式,保留年月日
  formatOnlyDatesLine, //将时间戳转为日期格式,保留年-月-日
  formatOnlyMD: formatOnlyMD, //将时间戳转为日期格式,保留月日  
  formatOnlyTimes: formatOnlyTimes, //将时间戳转为日期格式,保留时分
  timestampToTime, //将时间戳转换成日期格式
  secondsToTime: secondsToTime, //转换时间格式，分秒  
  transdate: transdate, //时间转换时间戳  
  getWeek, //转换星期
  dateToTime: dateToTime, //将日期格式转为时间戳

  countdown: countdown, //毫秒级倒计时
  imageUtil: imageUtil, //图片宽高比例 

  rand: rand, //生成区间随机数
  throttle: throttle, //函数节流
  stringToInt, //强制转为数字型
  getQueryString, //通过url字符串获取里面的参数值
  chkstrlen, //数字数
  sliceArray//数组分成几个同等长度的数组
}
